#include "stdafx.h"
#include "Writer.h"

bool Writer::openOutputFile (char *output) {
  if (strcmp (&output[strlen (output) - 4], ".csv") != 0) {
    return false; // check whether it's a .csv file 
  } else if ((outfile = fopen (output, "r")) == NULL) {
    printf ("No output file specified, will print on the screen.\n\n");
    outfile = stdout;
  } else {
    return true;
  }
}


Writer::Writer (char *output) {
  if (openOutputFile (output)) { //open the output file succeed
    symbolList.clear ();
  } else {
    // Report an error to ErrorNotifier
    delete this;
  }
}


Writer::~Writer () {
  for each (PID p in symbolList) {
    switch (p->token) {
    case 401: case 402: //Numbers
      delete p;
    default: //Others, uses std::string for value
      delete p->unionValue.strValue; // is a std::string*
      delete p;
    }
  }
  fclose (outfile);
}

void Writer::addItem (PID newID) {
  symbolList.push_back(newID);
}

void Writer::writeFile () {
  fprintf (outfile, "%s%s", "**-----This file is generated by Lexer-----**\n", "Token,Value,Line,Offset,\n");
  for each (PID p in symbolList) {
    fprintf (outfile, "<%3d,", p->token);
    switch (p->token) {
    case 401: //Integers
      fprintf (outfile, "%d,", (int)p->unionValue.numValue);
      break;
    case 402: //Decimals
      fprintf (outfile, "%f,", p->unionValue.numValue);
    default: // Others, uses std::string
      fprintf (outfile, "%s,", *(p->unionValue.strValue));
      break;
    }
    fprintf (outfile, "%d,%d,\n", p->line, p->offset);
  }
}

